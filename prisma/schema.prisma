generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @map("_id")
  email     String   @unique
  name      String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Account   Account?

  emailVerified Boolean
  Session       Session[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires Int?

  feedbacks Feedback[]
  comments  Comment[]
  upvotes   Upvote[]

  @@map("users")
}

model Account {
  id           String    @id @map("_id")
  userId       String    @unique
  accountId    String?
  providerId   String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  password     String

  user User @relation(fields: [userId], references: [id])

  idToken String?

  @@map("accounts")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("session")
}

model Verification {
  id         String   @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  feedbacks Feedback[]

  @@map("category")
}

model Roadmap {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  feedbacks Feedback[]

  @@map("roadmap")
}

model Board {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  feedbacks Feedback[]

  @@map("board")
}

model Feedback {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  feedback  String
  status    FeedbackStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  board   Board  @relation(fields: [boardId], references: [id])
  boardId String @db.ObjectId

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId

  roadmap   Roadmap? @relation(fields: [roadmapId], references: [id])
  roadmapId String?  @db.ObjectId

  comments Comment[]
  upvotes  Upvote[]

  @@map("feedback")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())

  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String   @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("comment")
}

model Upvote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String   @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("upvote")
}

enum FeedbackStatus {
  PENDING
  APPROVED
}
